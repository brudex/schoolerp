{"version":3,"file":"js/exam/online-exam/create~js/exam/online-exam/edit.js?id=23bbb178dcd47725d98b","sources":["webpack:///form.vue","webpack:///./resources/js/views/exam/online-exam/form.vue?f4dc","webpack:///./resources/js/views/exam/online-exam/form.vue","webpack:///./resources/js/views/exam/online-exam/form.vue?f69a","webpack:///./resources/js/views/exam/online-exam/form.vue?4089"],"sourcesContent":["<template>\n    <div>\n        <form @submit.prevent=\"proceed\" @keydown=\"onlineExamForm.errors.clear($event.target.name)\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-3\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_name')}}</label>\n                        <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.name\" name=\"name\" :placeholder=\"trans('exam.online_exam_name')\">\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"name\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-3\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('academic.batch')}} </label>\n                        <v-select label=\"name\" v-model=\"selected_batch\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" @close=\"onlineExamForm.errors.clear('batch_id')\" @remove=\"onlineExamForm.batch_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"batch_id\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-3\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('academic.subject')}} </label>\n                        <v-select label=\"name\" v-model=\"selected_subject\" name=\"subject_id\" id=\"subject_id\" :options=\"subjects\" :placeholder=\"trans('academic.select_subject')\" @select=\"onSubjectSelect\" @close=\"onlineExamForm.errors.clear('subject_id')\" @remove=\"onlineExamForm.subject_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!subjects.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"subject_id\"></show-error>\n                    </div>\n                </div>\n                <!-- <div class=\"col-12 col-sm-3\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_type')}}</label>\n                        <select v-model=\"onlineExamForm.exam_type\" class=\"custom-select col-12\" name=\"exam_type\"@change=\"onlineExamForm.errors.clear('exam_type')\">\n                          <option value=\"\" selected>{{trans('general.select_one')}}</option>\n                          <option v-for=\"option in exam_types\" v-bind:value=\"option.value\">\n                            {{ option.text }}\n                          </option>\n                        </select>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"exam_type\"></show-error>\n                    </div>\n                </div> -->\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_date')}}</label>\n                        <datepicker v-model=\"onlineExamForm.date\" :bootstrapStyling=\"true\" @selected=\"onlineExamForm.errors.clear('date')\" :placeholder=\"trans('exam.online_exam_date')\"></datepicker>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"date\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_start_time')}}</label>\n                        <timepicker :hour.sync=\"start_time.hour\" :minute.sync=\"start_time.minute\" :meridiem.sync=\"start_time.meridiem\"></timepicker>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_end_time')}}</label>\n                        <timepicker :hour.sync=\"end_time.hour\" :minute.sync=\"end_time.minute\" :meridiem.sync=\"end_time.meridiem\"></timepicker>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_passing_percentage')}}</label>\n                        <div class=\"input-group mb-3\">\n                            <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.passing_percentage\" name=\"passing_percentage\" :placeholder=\"trans('exam.online_exam_passing_percentage')\">\n                            <div class=\"input-group-append\"><span class=\"input-group-text\">%</span></div>\n                        </div>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"passing_percentage\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <div>{{trans('exam.online_exam_is_negative_mark_applicable')}}</div>\n                        <switches class=\"m-t-10\" v-model=\"onlineExamForm.is_negative_mark_applicable\" theme=\"bootstrap\" color=\"success\"></switches> \n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"online_exam_is_negative_mark_applicable\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-4\" v-if=\"onlineExamForm.is_negative_mark_applicable\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_negative_mark_percentage_per_question')}}</label>\n                        <div class=\"input-group mb-3\">\n                            <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.negative_mark_percentage_per_question\" name=\"negative_mark_percentage_per_question\" :placeholder=\"trans('exam.online_exam_negative_mark_percentage_per_question')\">\n                            <div class=\"input-group-append\"><span class=\"input-group-text\">%</span></div>\n                        </div>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"negative_mark_percentage_per_question\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_instructions')}}</label>\n                        <html-editor name=\"instructions\" :model.sync=\"onlineExamForm.instructions\" height=\"200\" :isUpdate=\"uuid ? true : false\" @clearErrors=\"onlineExamForm.errors.clear('instructions')\"></html-editor>\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"instructions\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.online_exam_description')}}</label>\n                        <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.description\" name=\"description\" :placeholder=\"trans('exam.online_exam_description')\">\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"description\"></show-error>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-footer text-right\">\n                <router-link to=\"/online-exam\" class=\"btn btn-danger waves-effect waves-light \">{{trans('general.cancel')}}</router-link>\n                <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\n                    <span v-if=\"uuid\">{{trans('general.update')}}</span>\n                    <span v-else>{{trans('general.save')}}</span>\n                </button>\n            </div>\n        </form>\n    </div>\n</template>\n\n\n<script>\n    import onlineExamForm from '../form'\n\n    export default {\n        components: {onlineExamForm},\n        data() {\n            return {\n                onlineExamForm: new Form({\n                    name: '',\n                    batch_id: '',\n                    subject_id: '',\n                    date: '',\n                    start_time: '',\n                    end_time: '',\n                    exam_type: 'mcq',\n                    passing_percentage: '',\n                    is_negative_mark_applicable: '',\n                    negative_mark_percentage_per_question: '',\n                    instructions: '',\n                    description: ''\n                }),\n                start_time: {\n                    hour: '',\n                    minute: '',\n                    meridiem: 'am'\n                },\n                end_time: {\n                    hour: '',\n                    minute: '',\n                    meridiem: 'am'\n                },\n                exam_types: [],\n                batches: [],\n                selected_batch: null,\n                selected_subject: null,\n                batch_with_subjects: [],\n                subjects: [],\n                showExamModal: false\n            };\n        },\n        props: ['uuid'],\n        mounted() {\n            if(!helper.hasPermission('create-online-exam') && !helper.hasPermission('edit-online-exam')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            this.getPreRequisite();\n        },\n        methods: {\n            hasPermission(permission){\n                return helper.hasPermission(permission);\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/online-exam/pre-requisite')\n                    .then(response => {\n                        this.batches = response.batches;\n                        this.batch_with_subjects = response.batch_with_subjects;\n                        this.exam_types = response.exam_types;\n\n                        if(this.uuid)\n                            this.get();\n\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },\n            getSubjects(){\n                let loader = this.$loading.show();\n\n                let batch = this.batch_with_subjects.find(o => o.id == this.onlineExamForm.batch_id);\n\n                if (typeof batch == 'undefined') {\n                    loader.hide();\n                    return;\n                }\n\n                this.subjects = [];\n                this.selected_subject = '';\n\n                batch.subjects.forEach(subject => {\n                    this.subjects.push({\n                        id: subject.id,\n                        name: subject.name+' ('+subject.code+')'\n                    });\n                });\n                \n                loader.hide();\n            },\n            proceed(){\n                if(this.uuid)\n                    this.update();\n                else\n                    this.store();\n            },\n            store(){\n                let loader = this.$loading.show();\n                this.onlineExamForm.start_time = helper.toTime(this.start_time);\n                this.onlineExamForm.end_time   = helper.toTime(this.end_time);\n                this.onlineExamForm.post('/api/online-exam')\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.onlineExamForm.exam_type = 'mcq';\n                        this.selected_batch = null;\n                        this.selected_subject = null;\n                        this.start_time.hour = ''\n                        this.start_time.minute = ''\n                        this.end_time.hour = ''\n                        this.end_time.minute = ''\n                        this.$emit('completed');\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            get(){\n                let loader = this.$loading.show();\n                axios.get('/api/online-exam/'+this.uuid)\n                    .then(response => {\n                        loader.hide();\n                        this.onlineExamForm.name = response.online_exam.name;\n                        this.onlineExamForm.batch_id = response.online_exam.batch_id;\n                        this.onlineExamForm.subject_id = response.online_exam.subject_id;\n                        this.onlineExamForm.description = response.online_exam.description;\n                        this.onlineExamForm.instructions = response.online_exam.instructions;\n                        this.onlineExamForm.exam_type = response.online_exam.exam_type;\n                        this.onlineExamForm.passing_percentage = response.online_exam.passing_percentage;\n                        this.onlineExamForm.is_negative_mark_applicable = response.online_exam.is_negative_mark_applicable ? 1 : 0;\n                        this.onlineExamForm.negative_mark_percentage_per_question = response.online_exam.is_negative_mark_applicable ? response.online_exam.negative_mark_percentage_per_question : 0;\n                        this.selected_batch = response.selected_batch;\n                        this.selected_subject = response.selected_subject;\n                        this.onlineExamForm.date = response.online_exam.date;\n                        this.start_time = response.start_time;\n                        this.end_time = response.end_time;\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                        this.$router.push('/online-exam');\n                    });\n            },\n            update(){\n                let loader = this.$loading.show();\n                this.onlineExamForm.start_time = helper.toTime(this.start_time);\n                this.onlineExamForm.end_time   = helper.toTime(this.end_time);\n                this.onlineExamForm.patch('/api/online-exam/'+this.uuid)\n                    .then(response => {\n                        toastr.success(response.message);\n                        loader.hide();\n                        this.$router.push('/online-exam');\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onBatchSelect(selectedOption){\n                this.onlineExamForm.batch_id = selectedOption.id;\n                this.getSubjects();\n            },\n            onSubjectSelect(selectedOption){\n                this.onlineExamForm.subject_id = selectedOption.id;\n            }\n        },\n        watch: {\n        }\n    }\n</script>","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\n      \"form\",\n      {\n        on: {\n          submit: function($event) {\n            $event.preventDefault()\n            return _vm.proceed($event)\n          },\n          keydown: function($event) {\n            return _vm.onlineExamForm.errors.clear($event.target.name)\n          }\n        }\n      },\n      [\n        _c(\"div\", { staticClass: \"row\" }, [\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_name\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.onlineExamForm.name,\n                      expression: \"onlineExamForm.name\"\n                    }\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"name\",\n                    placeholder: _vm.trans(\"exam.online_exam_name\")\n                  },\n                  domProps: { value: _vm.onlineExamForm.name },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.$set(_vm.onlineExamForm, \"name\", $event.target.value)\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"name\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"academic.batch\")) + \" \")\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      \"group-values\": \"batches\",\n                      \"group-label\": \"course_group\",\n                      \"group-select\": false,\n                      name: \"batch_id\",\n                      id: \"batch_id\",\n                      options: _vm.batches,\n                      placeholder: _vm.trans(\"academic.select_batch\")\n                    },\n                    on: {\n                      select: _vm.onBatchSelect,\n                      close: function($event) {\n                        return _vm.onlineExamForm.errors.clear(\"batch_id\")\n                      },\n                      remove: function($event) {\n                        _vm.onlineExamForm.batch_id = \"\"\n                      }\n                    },\n                    model: {\n                      value: _vm.selected_batch,\n                      callback: function($$v) {\n                        _vm.selected_batch = $$v\n                      },\n                      expression: \"selected_batch\"\n                    }\n                  },\n                  [\n                    !_vm.batches.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\"\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"batch_id\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"academic.subject\")) + \" \")\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      name: \"subject_id\",\n                      id: \"subject_id\",\n                      options: _vm.subjects,\n                      placeholder: _vm.trans(\"academic.select_subject\")\n                    },\n                    on: {\n                      select: _vm.onSubjectSelect,\n                      close: function($event) {\n                        return _vm.onlineExamForm.errors.clear(\"subject_id\")\n                      },\n                      remove: function($event) {\n                        _vm.onlineExamForm.subject_id = \"\"\n                      }\n                    },\n                    model: {\n                      value: _vm.selected_subject,\n                      callback: function($$v) {\n                        _vm.selected_subject = $$v\n                      },\n                      expression: \"selected_subject\"\n                    }\n                  },\n                  [\n                    !_vm.subjects.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\"\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"subject_id\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_date\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\"datepicker\", {\n                  attrs: {\n                    bootstrapStyling: true,\n                    placeholder: _vm.trans(\"exam.online_exam_date\")\n                  },\n                  on: {\n                    selected: function($event) {\n                      return _vm.onlineExamForm.errors.clear(\"date\")\n                    }\n                  },\n                  model: {\n                    value: _vm.onlineExamForm.date,\n                    callback: function($$v) {\n                      _vm.$set(_vm.onlineExamForm, \"date\", $$v)\n                    },\n                    expression: \"onlineExamForm.date\"\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"date\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_start_time\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\"timepicker\", {\n                  attrs: {\n                    hour: _vm.start_time.hour,\n                    minute: _vm.start_time.minute,\n                    meridiem: _vm.start_time.meridiem\n                  },\n                  on: {\n                    \"update:hour\": function($event) {\n                      return _vm.$set(_vm.start_time, \"hour\", $event)\n                    },\n                    \"update:minute\": function($event) {\n                      return _vm.$set(_vm.start_time, \"minute\", $event)\n                    },\n                    \"update:meridiem\": function($event) {\n                      return _vm.$set(_vm.start_time, \"meridiem\", $event)\n                    }\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_end_time\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\"timepicker\", {\n                  attrs: {\n                    hour: _vm.end_time.hour,\n                    minute: _vm.end_time.minute,\n                    meridiem: _vm.end_time.meridiem\n                  },\n                  on: {\n                    \"update:hour\": function($event) {\n                      return _vm.$set(_vm.end_time, \"hour\", $event)\n                    },\n                    \"update:minute\": function($event) {\n                      return _vm.$set(_vm.end_time, \"minute\", $event)\n                    },\n                    \"update:meridiem\": function($event) {\n                      return _vm.$set(_vm.end_time, \"meridiem\", $event)\n                    }\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(\n                    _vm._s(_vm.trans(\"exam.online_exam_passing_percentage\"))\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"input-group mb-3\" }, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.onlineExamForm.passing_percentage,\n                        expression: \"onlineExamForm.passing_percentage\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"passing_percentage\",\n                      placeholder: _vm.trans(\n                        \"exam.online_exam_passing_percentage\"\n                      )\n                    },\n                    domProps: { value: _vm.onlineExamForm.passing_percentage },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.onlineExamForm,\n                          \"passing_percentage\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm._m(0)\n                ]),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"passing_percentage\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"div\", [\n                  _vm._v(\n                    _vm._s(\n                      _vm.trans(\"exam.online_exam_is_negative_mark_applicable\")\n                    )\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"switches\", {\n                  staticClass: \"m-t-10\",\n                  attrs: { theme: \"bootstrap\", color: \"success\" },\n                  model: {\n                    value: _vm.onlineExamForm.is_negative_mark_applicable,\n                    callback: function($$v) {\n                      _vm.$set(\n                        _vm.onlineExamForm,\n                        \"is_negative_mark_applicable\",\n                        $$v\n                      )\n                    },\n                    expression: \"onlineExamForm.is_negative_mark_applicable\"\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"online_exam_is_negative_mark_applicable\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _vm.onlineExamForm.is_negative_mark_applicable\n            ? _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(\n                        _vm._s(\n                          _vm.trans(\n                            \"exam.online_exam_negative_mark_percentage_per_question\"\n                          )\n                        )\n                      )\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"input-group mb-3\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value:\n                              _vm.onlineExamForm\n                                .negative_mark_percentage_per_question,\n                            expression:\n                              \"onlineExamForm.negative_mark_percentage_per_question\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        attrs: {\n                          type: \"text\",\n                          name: \"negative_mark_percentage_per_question\",\n                          placeholder: _vm.trans(\n                            \"exam.online_exam_negative_mark_percentage_per_question\"\n                          )\n                        },\n                        domProps: {\n                          value:\n                            _vm.onlineExamForm\n                              .negative_mark_percentage_per_question\n                        },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.onlineExamForm,\n                              \"negative_mark_percentage_per_question\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm._v(\" \"),\n                      _vm._m(1)\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"show-error\", {\n                      attrs: {\n                        \"form-name\": _vm.onlineExamForm,\n                        \"prop-name\": \"negative_mark_percentage_per_question\"\n                      }\n                    })\n                  ],\n                  1\n                )\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_instructions\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\"html-editor\", {\n                  attrs: {\n                    name: \"instructions\",\n                    model: _vm.onlineExamForm.instructions,\n                    height: \"200\",\n                    isUpdate: _vm.uuid ? true : false\n                  },\n                  on: {\n                    \"update:model\": function($event) {\n                      return _vm.$set(\n                        _vm.onlineExamForm,\n                        \"instructions\",\n                        $event\n                      )\n                    },\n                    clearErrors: function($event) {\n                      return _vm.onlineExamForm.errors.clear(\"instructions\")\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"instructions\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_description\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.onlineExamForm.description,\n                      expression: \"onlineExamForm.description\"\n                    }\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"description\",\n                    placeholder: _vm.trans(\"exam.online_exam_description\")\n                  },\n                  domProps: { value: _vm.onlineExamForm.description },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.$set(\n                        _vm.onlineExamForm,\n                        \"description\",\n                        $event.target.value\n                      )\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"description\"\n                  }\n                })\n              ],\n              1\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          { staticClass: \"card-footer text-right\" },\n          [\n            _c(\n              \"router-link\",\n              {\n                staticClass: \"btn btn-danger waves-effect waves-light \",\n                attrs: { to: \"/online-exam\" }\n              },\n              [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info waves-effect waves-light\",\n                attrs: { type: \"submit\" }\n              },\n              [\n                _vm.uuid\n                  ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                  : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))])\n              ]\n            )\n          ],\n          1\n        )\n      ]\n    )\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"input-group-append\" }, [\n      _c(\"span\", { staticClass: \"input-group-text\" }, [_vm._v(\"%\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"input-group-append\" }, [\n      _c(\"span\", { staticClass: \"input-group-text\" }, [_vm._v(\"%\")])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=074e693b&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Volumes/Webmaster/Projects/ScriptMint/instikit/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('074e693b')) {\n      api.createRecord('074e693b', component.options)\n    } else {\n      api.reload('074e693b', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=074e693b&\", function () {\n      api.rerender('074e693b', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/online-exam/form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=074e693b&\""],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAivHA;AAyHA;AAvKA;;;;;;;;;;;;ACzmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}